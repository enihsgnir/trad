// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'parser.dart';

// **************************************************************************
// Generator: ProductionBuilder
// **************************************************************************

const _$productions = [
  (Nonterminal('start'), 1),
  (Nonterminal('definitions'), 2),
  (Nonterminal('definitions'), 0),
  (Nonterminal('definition'), 1),
  (Nonterminal('definition'), 1),
  (Nonterminal('definition'), 1),
  (Nonterminal('classDeclaration'), 5),
  (Nonterminal('classMemberDeclarations'), 2),
  (Nonterminal('classMemberDeclarations'), 0),
  (Nonterminal('classMemberDeclaration'), 1),
  (Nonterminal('classMemberDeclaration'), 1),
  (Nonterminal('variableDeclaration'), 3),
  (Nonterminal('variableDeclaration'), 5),
  (Nonterminal('functionDeclaration'), 6),
  (Nonterminal('parameterList'), 1),
  (Nonterminal('parameterList'), 0),
  (Nonterminal('parameters'), 3),
  (Nonterminal('parameters'), 1),
  (Nonterminal('parameter'), 2),
  (Nonterminal('functionBody'), 1),
  (Nonterminal('functionBody'), 3),
  (Nonterminal('type'), 1),
  (Nonterminal('type'), 1),
  (Nonterminal('type'), 1),
  (Nonterminal('type'), 1),
  (Nonterminal('type'), 1),
  (Nonterminal('type'), 4),
  (Nonterminal('type'), 1),
  (Nonterminal('type'), 1),
  (Nonterminal('block'), 3),
  (Nonterminal('statements'), 2),
  (Nonterminal('statements'), 0),
  (Nonterminal('statement'), 1),
  (Nonterminal('statement'), 1),
  (Nonterminal('statement'), 1),
  (Nonterminal('statement'), 1),
  (Nonterminal('statement'), 1),
  (Nonterminal('statement'), 1),
  (Nonterminal('statement'), 1),
  (Nonterminal('statement'), 1),
  (Nonterminal('expressionStatement'), 2),
  (Nonterminal('returnStatement'), 3),
  (Nonterminal('returnStatement'), 2),
  (Nonterminal('ifStatement'), 6),
  (Nonterminal('elseStatement'), 2),
  (Nonterminal('elseStatement'), 2),
  (Nonterminal('elseStatement'), 0),
  (Nonterminal('forStatement'), 8),
  (Nonterminal('whileStatement'), 5),
  (Nonterminal('breakStatement'), 2),
  (Nonterminal('breakStatement'), 2),
  (Nonterminal('expression'), 1),
  (Nonterminal('expression'), 1),
  (Nonterminal('assignmentExpression'), 3),
  (Nonterminal('conditionalExpression'), 5),
  (Nonterminal('conditionalExpression'), 1),
  (Nonterminal('logicalOrExpression'), 3),
  (Nonterminal('logicalOrExpression'), 1),
  (Nonterminal('logicalAndExpression'), 3),
  (Nonterminal('logicalAndExpression'), 1),
  (Nonterminal('equalityExpression'), 3),
  (Nonterminal('equalityExpression'), 3),
  (Nonterminal('equalityExpression'), 1),
  (Nonterminal('relationalExpression'), 3),
  (Nonterminal('relationalExpression'), 3),
  (Nonterminal('relationalExpression'), 3),
  (Nonterminal('relationalExpression'), 3),
  (Nonterminal('relationalExpression'), 1),
  (Nonterminal('additiveExpression'), 3),
  (Nonterminal('additiveExpression'), 3),
  (Nonterminal('additiveExpression'), 1),
  (Nonterminal('multiplicativeExpression'), 3),
  (Nonterminal('multiplicativeExpression'), 3),
  (Nonterminal('multiplicativeExpression'), 3),
  (Nonterminal('multiplicativeExpression'), 1),
  (Nonterminal('unaryExpression'), 2),
  (Nonterminal('unaryExpression'), 2),
  (Nonterminal('unaryExpression'), 1),
  (Nonterminal('primary'), 1),
  (Nonterminal('primary'), 1),
  (Nonterminal('primary'), 3),
  (Nonterminal('primary'), 1),
  (Nonterminal('literal'), 1),
  (Nonterminal('literal'), 1),
  (Nonterminal('literal'), 1),
  (Nonterminal('literal'), 1),
  (Nonterminal('literal'), 1),
  (Nonterminal('listLiteral'), 2),
  (Nonterminal('listLiteral'), 3),
  (Nonterminal('expressionList'), 3),
  (Nonterminal('expressionList'), 1),
  (Nonterminal('functionInvocation'), 2),
  (Nonterminal('arguments'), 3),
  (Nonterminal('arguments'), 2),
];

// **************************************************************************
// Generator: ParsingTableBuilder
// **************************************************************************

const _$parsingTable = [
  {
    'definitions': Action.goto(1),
    '\$': Action.reduce(2),
    'class': Action.reduce(2),
    'num': Action.reduce(2),
    'int': Action.reduce(2),
    'double': Action.reduce(2),
    'String': Action.reduce(2),
    'bool': Action.reduce(2),
    'List': Action.reduce(2),
    'void': Action.reduce(2),
    'id': Action.reduce(2),
  },
  {
    'definition': Action.goto(2),
    'classDeclaration': Action.goto(3),
    'variableDeclaration': Action.goto(4),
    'functionDeclaration': Action.goto(5),
    'class': Action.shift(6),
    'type': Action.goto(7),
    'num': Action.shift(8),
    'int': Action.shift(9),
    'double': Action.shift(10),
    'String': Action.shift(11),
    'bool': Action.shift(12),
    'List': Action.shift(13),
    'void': Action.shift(14),
    'id': Action.shift(15),
    '\$': Action.accept,
  },
  {
    '\$': Action.reduce(1),
    'class': Action.reduce(1),
    'num': Action.reduce(1),
    'int': Action.reduce(1),
    'double': Action.reduce(1),
    'String': Action.reduce(1),
    'bool': Action.reduce(1),
    'List': Action.reduce(1),
    'void': Action.reduce(1),
    'id': Action.reduce(1),
  },
  {
    '\$': Action.reduce(3),
    'class': Action.reduce(3),
    'num': Action.reduce(3),
    'int': Action.reduce(3),
    'double': Action.reduce(3),
    'String': Action.reduce(3),
    'bool': Action.reduce(3),
    'List': Action.reduce(3),
    'void': Action.reduce(3),
    'id': Action.reduce(3),
  },
  {
    '\$': Action.reduce(4),
    'class': Action.reduce(4),
    'num': Action.reduce(4),
    'int': Action.reduce(4),
    'double': Action.reduce(4),
    'String': Action.reduce(4),
    'bool': Action.reduce(4),
    'List': Action.reduce(4),
    'void': Action.reduce(4),
    'id': Action.reduce(4),
  },
  {
    '\$': Action.reduce(5),
    'class': Action.reduce(5),
    'num': Action.reduce(5),
    'int': Action.reduce(5),
    'double': Action.reduce(5),
    'String': Action.reduce(5),
    'bool': Action.reduce(5),
    'List': Action.reduce(5),
    'void': Action.reduce(5),
    'id': Action.reduce(5),
  },
  {
    'id': Action.shift(16),
  },
  {
    'id': Action.shift(17),
  },
  {
    'id': Action.reduce(21),
    '>': Action.reduce(21),
  },
  {
    'id': Action.reduce(22),
    '>': Action.reduce(22),
  },
  {
    'id': Action.reduce(23),
    '>': Action.reduce(23),
  },
  {
    'id': Action.reduce(24),
    '>': Action.reduce(24),
  },
  {
    'id': Action.reduce(25),
    '>': Action.reduce(25),
  },
  {
    '<': Action.shift(18),
  },
  {
    'id': Action.reduce(27),
    '>': Action.reduce(27),
  },
  {
    'id': Action.reduce(28),
    '>': Action.reduce(28),
  },
  {
    '{': Action.shift(19),
  },
  {
    ';': Action.shift(20),
    '=': Action.shift(21),
    '(': Action.shift(22),
  },
  {
    'type': Action.goto(23),
    'num': Action.shift(8),
    'int': Action.shift(9),
    'double': Action.shift(10),
    'String': Action.shift(11),
    'bool': Action.shift(12),
    'List': Action.shift(13),
    'void': Action.shift(14),
    'id': Action.shift(15),
  },
  {
    'classMemberDeclarations': Action.goto(24),
    '}': Action.reduce(8),
    'num': Action.reduce(8),
    'int': Action.reduce(8),
    'double': Action.reduce(8),
    'String': Action.reduce(8),
    'bool': Action.reduce(8),
    'List': Action.reduce(8),
    'void': Action.reduce(8),
    'id': Action.reduce(8),
  },
  {
    '\$': Action.reduce(11),
    'class': Action.reduce(11),
    'num': Action.reduce(11),
    'int': Action.reduce(11),
    'double': Action.reduce(11),
    'String': Action.reduce(11),
    'bool': Action.reduce(11),
    'List': Action.reduce(11),
    'void': Action.reduce(11),
    'id': Action.reduce(11),
    '}': Action.reduce(11),
    '{': Action.reduce(11),
    'return': Action.reduce(11),
    'if': Action.reduce(11),
    'for': Action.reduce(11),
    'while': Action.reduce(11),
    'break': Action.reduce(11),
    'continue': Action.reduce(11),
    '-': Action.reduce(11),
    '!': Action.reduce(11),
    '(': Action.reduce(11),
    'intLiteral': Action.reduce(11),
    'str': Action.reduce(11),
    'true': Action.reduce(11),
    'false': Action.reduce(11),
    '[': Action.reduce(11),
  },
  {
    'expression': Action.goto(25),
    'assignmentExpression': Action.goto(26),
    'conditionalExpression': Action.goto(27),
    'id': Action.shift(28),
    'logicalOrExpression': Action.goto(29),
    'logicalAndExpression': Action.goto(30),
    'equalityExpression': Action.goto(31),
    'relationalExpression': Action.goto(32),
    'additiveExpression': Action.goto(33),
    'multiplicativeExpression': Action.goto(34),
    'unaryExpression': Action.goto(35),
    '-': Action.shift(36),
    '!': Action.shift(37),
    'primary': Action.goto(38),
    'literal': Action.goto(39),
    '(': Action.shift(40),
    'functionInvocation': Action.goto(41),
    'intLiteral': Action.shift(42),
    'str': Action.shift(43),
    'true': Action.shift(44),
    'false': Action.shift(45),
    'listLiteral': Action.goto(46),
    '[': Action.shift(47),
  },
  {
    'parameterList': Action.goto(48),
    'parameters': Action.goto(49),
    'parameter': Action.goto(50),
    'type': Action.goto(51),
    'num': Action.shift(8),
    'int': Action.shift(9),
    'double': Action.shift(10),
    'String': Action.shift(11),
    'bool': Action.shift(12),
    'List': Action.shift(13),
    'void': Action.shift(14),
    'id': Action.shift(15),
    ')': Action.reduce(15),
  },
  {
    '>': Action.shift(52),
  },
  {
    '}': Action.shift(53),
    'classMemberDeclaration': Action.goto(54),
    'variableDeclaration': Action.goto(55),
    'functionDeclaration': Action.goto(56),
    'type': Action.goto(7),
    'num': Action.shift(8),
    'int': Action.shift(9),
    'double': Action.shift(10),
    'String': Action.shift(11),
    'bool': Action.shift(12),
    'List': Action.shift(13),
    'void': Action.shift(14),
    'id': Action.shift(15),
  },
  {
    ';': Action.shift(57),
  },
  {
    ';': Action.reduce(51),
    ')': Action.reduce(51),
    ']': Action.reduce(51),
    ',': Action.reduce(51),
    ':': Action.reduce(51),
  },
  {
    ';': Action.reduce(52),
    ')': Action.reduce(52),
    ']': Action.reduce(52),
    ',': Action.reduce(52),
    ':': Action.reduce(52),
  },
  {
    '=': Action.shift(58),
    'arguments': Action.goto(59),
    '(': Action.shift(60),
    '<=': Action.reduce(79),
    '>=': Action.reduce(79),
    '<': Action.reduce(79),
    '>': Action.reduce(79),
    '==': Action.reduce(79),
    '!=': Action.reduce(79),
    '?': Action.reduce(79),
    ';': Action.reduce(79),
    '||': Action.reduce(79),
    '&&': Action.reduce(79),
    '+': Action.reduce(79),
    '-': Action.reduce(79),
    '*': Action.reduce(79),
    '~/': Action.reduce(79),
    '%': Action.reduce(79),
    ')': Action.reduce(79),
    ']': Action.reduce(79),
    ',': Action.reduce(79),
    ':': Action.reduce(79),
  },
  {
    '?': Action.shift(61),
    '||': Action.shift(62),
    ';': Action.reduce(55),
    ')': Action.reduce(55),
    ']': Action.reduce(55),
    ',': Action.reduce(55),
    ':': Action.reduce(55),
  },
  {
    '&&': Action.shift(63),
    '?': Action.reduce(57),
    ';': Action.reduce(57),
    '||': Action.reduce(57),
    ')': Action.reduce(57),
    ']': Action.reduce(57),
    ',': Action.reduce(57),
    ':': Action.reduce(57),
  },
  {
    '?': Action.reduce(59),
    ';': Action.reduce(59),
    '||': Action.reduce(59),
    '&&': Action.reduce(59),
    ')': Action.reduce(59),
    ']': Action.reduce(59),
    ',': Action.reduce(59),
    ':': Action.reduce(59),
  },
  {
    '==': Action.shift(64),
    '!=': Action.shift(65),
    '?': Action.reduce(62),
    ';': Action.reduce(62),
    '||': Action.reduce(62),
    '&&': Action.reduce(62),
    ')': Action.reduce(62),
    ']': Action.reduce(62),
    ',': Action.reduce(62),
    ':': Action.reduce(62),
  },
  {
    '<=': Action.shift(66),
    '>=': Action.shift(67),
    '<': Action.shift(68),
    '>': Action.shift(69),
    '+': Action.shift(70),
    '-': Action.shift(71),
    '==': Action.reduce(67),
    '!=': Action.reduce(67),
    '?': Action.reduce(67),
    ';': Action.reduce(67),
    '||': Action.reduce(67),
    '&&': Action.reduce(67),
    ')': Action.reduce(67),
    ']': Action.reduce(67),
    ',': Action.reduce(67),
    ':': Action.reduce(67),
  },
  {
    '*': Action.shift(72),
    '~/': Action.shift(73),
    '%': Action.shift(74),
    '<=': Action.reduce(70),
    '>=': Action.reduce(70),
    '<': Action.reduce(70),
    '>': Action.reduce(70),
    '==': Action.reduce(70),
    '!=': Action.reduce(70),
    '?': Action.reduce(70),
    ';': Action.reduce(70),
    '||': Action.reduce(70),
    '&&': Action.reduce(70),
    '+': Action.reduce(70),
    '-': Action.reduce(70),
    ')': Action.reduce(70),
    ']': Action.reduce(70),
    ',': Action.reduce(70),
    ':': Action.reduce(70),
  },
  {
    '<=': Action.reduce(74),
    '>=': Action.reduce(74),
    '<': Action.reduce(74),
    '>': Action.reduce(74),
    '==': Action.reduce(74),
    '!=': Action.reduce(74),
    '?': Action.reduce(74),
    ';': Action.reduce(74),
    '||': Action.reduce(74),
    '&&': Action.reduce(74),
    '+': Action.reduce(74),
    '-': Action.reduce(74),
    '*': Action.reduce(74),
    '~/': Action.reduce(74),
    '%': Action.reduce(74),
    ')': Action.reduce(74),
    ']': Action.reduce(74),
    ',': Action.reduce(74),
    ':': Action.reduce(74),
  },
  {
    'unaryExpression': Action.goto(75),
    '-': Action.shift(36),
    '!': Action.shift(37),
    'primary': Action.goto(38),
    'literal': Action.goto(39),
    'id': Action.shift(76),
    '(': Action.shift(40),
    'functionInvocation': Action.goto(41),
    'intLiteral': Action.shift(42),
    'str': Action.shift(43),
    'true': Action.shift(44),
    'false': Action.shift(45),
    'listLiteral': Action.goto(46),
    '[': Action.shift(47),
  },
  {
    'unaryExpression': Action.goto(77),
    '-': Action.shift(36),
    '!': Action.shift(37),
    'primary': Action.goto(38),
    'literal': Action.goto(39),
    'id': Action.shift(76),
    '(': Action.shift(40),
    'functionInvocation': Action.goto(41),
    'intLiteral': Action.shift(42),
    'str': Action.shift(43),
    'true': Action.shift(44),
    'false': Action.shift(45),
    'listLiteral': Action.goto(46),
    '[': Action.shift(47),
  },
  {
    '<=': Action.reduce(77),
    '>=': Action.reduce(77),
    '<': Action.reduce(77),
    '>': Action.reduce(77),
    '==': Action.reduce(77),
    '!=': Action.reduce(77),
    '?': Action.reduce(77),
    ';': Action.reduce(77),
    '||': Action.reduce(77),
    '&&': Action.reduce(77),
    '+': Action.reduce(77),
    '-': Action.reduce(77),
    '*': Action.reduce(77),
    '~/': Action.reduce(77),
    '%': Action.reduce(77),
    ')': Action.reduce(77),
    ']': Action.reduce(77),
    ',': Action.reduce(77),
    ':': Action.reduce(77),
  },
  {
    '<=': Action.reduce(78),
    '>=': Action.reduce(78),
    '<': Action.reduce(78),
    '>': Action.reduce(78),
    '==': Action.reduce(78),
    '!=': Action.reduce(78),
    '?': Action.reduce(78),
    ';': Action.reduce(78),
    '||': Action.reduce(78),
    '&&': Action.reduce(78),
    '+': Action.reduce(78),
    '-': Action.reduce(78),
    '*': Action.reduce(78),
    '~/': Action.reduce(78),
    '%': Action.reduce(78),
    ')': Action.reduce(78),
    ']': Action.reduce(78),
    ',': Action.reduce(78),
    ':': Action.reduce(78),
  },
  {
    'expression': Action.goto(78),
    'assignmentExpression': Action.goto(26),
    'conditionalExpression': Action.goto(27),
    'id': Action.shift(28),
    'logicalOrExpression': Action.goto(29),
    'logicalAndExpression': Action.goto(30),
    'equalityExpression': Action.goto(31),
    'relationalExpression': Action.goto(32),
    'additiveExpression': Action.goto(33),
    'multiplicativeExpression': Action.goto(34),
    'unaryExpression': Action.goto(35),
    '-': Action.shift(36),
    '!': Action.shift(37),
    'primary': Action.goto(38),
    'literal': Action.goto(39),
    '(': Action.shift(40),
    'functionInvocation': Action.goto(41),
    'intLiteral': Action.shift(42),
    'str': Action.shift(43),
    'true': Action.shift(44),
    'false': Action.shift(45),
    'listLiteral': Action.goto(46),
    '[': Action.shift(47),
  },
  {
    '<=': Action.reduce(81),
    '>=': Action.reduce(81),
    '<': Action.reduce(81),
    '>': Action.reduce(81),
    '==': Action.reduce(81),
    '!=': Action.reduce(81),
    '?': Action.reduce(81),
    ';': Action.reduce(81),
    '||': Action.reduce(81),
    '&&': Action.reduce(81),
    '+': Action.reduce(81),
    '-': Action.reduce(81),
    '*': Action.reduce(81),
    '~/': Action.reduce(81),
    '%': Action.reduce(81),
    ')': Action.reduce(81),
    ']': Action.reduce(81),
    ',': Action.reduce(81),
    ':': Action.reduce(81),
  },
  {
    '<=': Action.reduce(82),
    '>=': Action.reduce(82),
    '<': Action.reduce(82),
    '>': Action.reduce(82),
    '==': Action.reduce(82),
    '!=': Action.reduce(82),
    '?': Action.reduce(82),
    ';': Action.reduce(82),
    '||': Action.reduce(82),
    '&&': Action.reduce(82),
    '+': Action.reduce(82),
    '-': Action.reduce(82),
    '*': Action.reduce(82),
    '~/': Action.reduce(82),
    '%': Action.reduce(82),
    ')': Action.reduce(82),
    ']': Action.reduce(82),
    ',': Action.reduce(82),
    ':': Action.reduce(82),
  },
  {
    '<=': Action.reduce(83),
    '>=': Action.reduce(83),
    '<': Action.reduce(83),
    '>': Action.reduce(83),
    '==': Action.reduce(83),
    '!=': Action.reduce(83),
    '?': Action.reduce(83),
    ';': Action.reduce(83),
    '||': Action.reduce(83),
    '&&': Action.reduce(83),
    '+': Action.reduce(83),
    '-': Action.reduce(83),
    '*': Action.reduce(83),
    '~/': Action.reduce(83),
    '%': Action.reduce(83),
    ')': Action.reduce(83),
    ']': Action.reduce(83),
    ',': Action.reduce(83),
    ':': Action.reduce(83),
  },
  {
    '<=': Action.reduce(84),
    '>=': Action.reduce(84),
    '<': Action.reduce(84),
    '>': Action.reduce(84),
    '==': Action.reduce(84),
    '!=': Action.reduce(84),
    '?': Action.reduce(84),
    ';': Action.reduce(84),
    '||': Action.reduce(84),
    '&&': Action.reduce(84),
    '+': Action.reduce(84),
    '-': Action.reduce(84),
    '*': Action.reduce(84),
    '~/': Action.reduce(84),
    '%': Action.reduce(84),
    ')': Action.reduce(84),
    ']': Action.reduce(84),
    ',': Action.reduce(84),
    ':': Action.reduce(84),
  },
  {
    '<=': Action.reduce(85),
    '>=': Action.reduce(85),
    '<': Action.reduce(85),
    '>': Action.reduce(85),
    '==': Action.reduce(85),
    '!=': Action.reduce(85),
    '?': Action.reduce(85),
    ';': Action.reduce(85),
    '||': Action.reduce(85),
    '&&': Action.reduce(85),
    '+': Action.reduce(85),
    '-': Action.reduce(85),
    '*': Action.reduce(85),
    '~/': Action.reduce(85),
    '%': Action.reduce(85),
    ')': Action.reduce(85),
    ']': Action.reduce(85),
    ',': Action.reduce(85),
    ':': Action.reduce(85),
  },
  {
    '<=': Action.reduce(86),
    '>=': Action.reduce(86),
    '<': Action.reduce(86),
    '>': Action.reduce(86),
    '==': Action.reduce(86),
    '!=': Action.reduce(86),
    '?': Action.reduce(86),
    ';': Action.reduce(86),
    '||': Action.reduce(86),
    '&&': Action.reduce(86),
    '+': Action.reduce(86),
    '-': Action.reduce(86),
    '*': Action.reduce(86),
    '~/': Action.reduce(86),
    '%': Action.reduce(86),
    ')': Action.reduce(86),
    ']': Action.reduce(86),
    ',': Action.reduce(86),
    ':': Action.reduce(86),
  },
  {
    ']': Action.shift(79),
    'expressionList': Action.goto(80),
    'expression': Action.goto(81),
    'assignmentExpression': Action.goto(26),
    'conditionalExpression': Action.goto(27),
    'id': Action.shift(28),
    'logicalOrExpression': Action.goto(29),
    'logicalAndExpression': Action.goto(30),
    'equalityExpression': Action.goto(31),
    'relationalExpression': Action.goto(32),
    'additiveExpression': Action.goto(33),
    'multiplicativeExpression': Action.goto(34),
    'unaryExpression': Action.goto(35),
    '-': Action.shift(36),
    '!': Action.shift(37),
    'primary': Action.goto(38),
    'literal': Action.goto(39),
    '(': Action.shift(40),
    'functionInvocation': Action.goto(41),
    'intLiteral': Action.shift(42),
    'str': Action.shift(43),
    'true': Action.shift(44),
    'false': Action.shift(45),
    'listLiteral': Action.goto(46),
    '[': Action.shift(47),
  },
  {
    ')': Action.shift(82),
  },
  {
    ',': Action.shift(83),
    ')': Action.reduce(14),
  },
  {
    ')': Action.reduce(17),
    ',': Action.reduce(17),
  },
  {
    'id': Action.shift(84),
  },
  {
    'id': Action.reduce(26),
    '>': Action.reduce(26),
  },
  {
    '\$': Action.reduce(6),
    'class': Action.reduce(6),
    'num': Action.reduce(6),
    'int': Action.reduce(6),
    'double': Action.reduce(6),
    'String': Action.reduce(6),
    'bool': Action.reduce(6),
    'List': Action.reduce(6),
    'void': Action.reduce(6),
    'id': Action.reduce(6),
  },
  {
    '}': Action.reduce(7),
    'num': Action.reduce(7),
    'int': Action.reduce(7),
    'double': Action.reduce(7),
    'String': Action.reduce(7),
    'bool': Action.reduce(7),
    'List': Action.reduce(7),
    'void': Action.reduce(7),
    'id': Action.reduce(7),
  },
  {
    '}': Action.reduce(9),
    'num': Action.reduce(9),
    'int': Action.reduce(9),
    'double': Action.reduce(9),
    'String': Action.reduce(9),
    'bool': Action.reduce(9),
    'List': Action.reduce(9),
    'void': Action.reduce(9),
    'id': Action.reduce(9),
  },
  {
    '}': Action.reduce(10),
    'num': Action.reduce(10),
    'int': Action.reduce(10),
    'double': Action.reduce(10),
    'String': Action.reduce(10),
    'bool': Action.reduce(10),
    'List': Action.reduce(10),
    'void': Action.reduce(10),
    'id': Action.reduce(10),
  },
  {
    '\$': Action.reduce(12),
    'class': Action.reduce(12),
    'num': Action.reduce(12),
    'int': Action.reduce(12),
    'double': Action.reduce(12),
    'String': Action.reduce(12),
    'bool': Action.reduce(12),
    'List': Action.reduce(12),
    'void': Action.reduce(12),
    'id': Action.reduce(12),
    '}': Action.reduce(12),
    '{': Action.reduce(12),
    'return': Action.reduce(12),
    'if': Action.reduce(12),
    'for': Action.reduce(12),
    'while': Action.reduce(12),
    'break': Action.reduce(12),
    'continue': Action.reduce(12),
    '-': Action.reduce(12),
    '!': Action.reduce(12),
    '(': Action.reduce(12),
    'intLiteral': Action.reduce(12),
    'str': Action.reduce(12),
    'true': Action.reduce(12),
    'false': Action.reduce(12),
    '[': Action.reduce(12),
  },
  {
    'expression': Action.goto(85),
    'assignmentExpression': Action.goto(26),
    'conditionalExpression': Action.goto(27),
    'id': Action.shift(28),
    'logicalOrExpression': Action.goto(29),
    'logicalAndExpression': Action.goto(30),
    'equalityExpression': Action.goto(31),
    'relationalExpression': Action.goto(32),
    'additiveExpression': Action.goto(33),
    'multiplicativeExpression': Action.goto(34),
    'unaryExpression': Action.goto(35),
    '-': Action.shift(36),
    '!': Action.shift(37),
    'primary': Action.goto(38),
    'literal': Action.goto(39),
    '(': Action.shift(40),
    'functionInvocation': Action.goto(41),
    'intLiteral': Action.shift(42),
    'str': Action.shift(43),
    'true': Action.shift(44),
    'false': Action.shift(45),
    'listLiteral': Action.goto(46),
    '[': Action.shift(47),
  },
  {
    '<=': Action.reduce(91),
    '>=': Action.reduce(91),
    '<': Action.reduce(91),
    '>': Action.reduce(91),
    '==': Action.reduce(91),
    '!=': Action.reduce(91),
    '?': Action.reduce(91),
    ';': Action.reduce(91),
    '||': Action.reduce(91),
    '&&': Action.reduce(91),
    '+': Action.reduce(91),
    '-': Action.reduce(91),
    '*': Action.reduce(91),
    '~/': Action.reduce(91),
    '%': Action.reduce(91),
    ')': Action.reduce(91),
    ']': Action.reduce(91),
    ',': Action.reduce(91),
    ':': Action.reduce(91),
  },
  {
    'expressionList': Action.goto(86),
    ')': Action.shift(87),
    'expression': Action.goto(81),
    'assignmentExpression': Action.goto(26),
    'conditionalExpression': Action.goto(27),
    'id': Action.shift(28),
    'logicalOrExpression': Action.goto(29),
    'logicalAndExpression': Action.goto(30),
    'equalityExpression': Action.goto(31),
    'relationalExpression': Action.goto(32),
    'additiveExpression': Action.goto(33),
    'multiplicativeExpression': Action.goto(34),
    'unaryExpression': Action.goto(35),
    '-': Action.shift(36),
    '!': Action.shift(37),
    'primary': Action.goto(38),
    'literal': Action.goto(39),
    '(': Action.shift(40),
    'functionInvocation': Action.goto(41),
    'intLiteral': Action.shift(42),
    'str': Action.shift(43),
    'true': Action.shift(44),
    'false': Action.shift(45),
    'listLiteral': Action.goto(46),
    '[': Action.shift(47),
  },
  {
    'expression': Action.goto(88),
    'assignmentExpression': Action.goto(26),
    'conditionalExpression': Action.goto(27),
    'id': Action.shift(28),
    'logicalOrExpression': Action.goto(29),
    'logicalAndExpression': Action.goto(30),
    'equalityExpression': Action.goto(31),
    'relationalExpression': Action.goto(32),
    'additiveExpression': Action.goto(33),
    'multiplicativeExpression': Action.goto(34),
    'unaryExpression': Action.goto(35),
    '-': Action.shift(36),
    '!': Action.shift(37),
    'primary': Action.goto(38),
    'literal': Action.goto(39),
    '(': Action.shift(40),
    'functionInvocation': Action.goto(41),
    'intLiteral': Action.shift(42),
    'str': Action.shift(43),
    'true': Action.shift(44),
    'false': Action.shift(45),
    'listLiteral': Action.goto(46),
    '[': Action.shift(47),
  },
  {
    'logicalAndExpression': Action.goto(89),
    'equalityExpression': Action.goto(31),
    'relationalExpression': Action.goto(32),
    'additiveExpression': Action.goto(33),
    'multiplicativeExpression': Action.goto(34),
    'unaryExpression': Action.goto(35),
    '-': Action.shift(36),
    '!': Action.shift(37),
    'primary': Action.goto(38),
    'literal': Action.goto(39),
    'id': Action.shift(76),
    '(': Action.shift(40),
    'functionInvocation': Action.goto(41),
    'intLiteral': Action.shift(42),
    'str': Action.shift(43),
    'true': Action.shift(44),
    'false': Action.shift(45),
    'listLiteral': Action.goto(46),
    '[': Action.shift(47),
  },
  {
    'equalityExpression': Action.goto(90),
    'relationalExpression': Action.goto(32),
    'additiveExpression': Action.goto(33),
    'multiplicativeExpression': Action.goto(34),
    'unaryExpression': Action.goto(35),
    '-': Action.shift(36),
    '!': Action.shift(37),
    'primary': Action.goto(38),
    'literal': Action.goto(39),
    'id': Action.shift(76),
    '(': Action.shift(40),
    'functionInvocation': Action.goto(41),
    'intLiteral': Action.shift(42),
    'str': Action.shift(43),
    'true': Action.shift(44),
    'false': Action.shift(45),
    'listLiteral': Action.goto(46),
    '[': Action.shift(47),
  },
  {
    'relationalExpression': Action.goto(91),
    'additiveExpression': Action.goto(33),
    'multiplicativeExpression': Action.goto(34),
    'unaryExpression': Action.goto(35),
    '-': Action.shift(36),
    '!': Action.shift(37),
    'primary': Action.goto(38),
    'literal': Action.goto(39),
    'id': Action.shift(76),
    '(': Action.shift(40),
    'functionInvocation': Action.goto(41),
    'intLiteral': Action.shift(42),
    'str': Action.shift(43),
    'true': Action.shift(44),
    'false': Action.shift(45),
    'listLiteral': Action.goto(46),
    '[': Action.shift(47),
  },
  {
    'relationalExpression': Action.goto(92),
    'additiveExpression': Action.goto(33),
    'multiplicativeExpression': Action.goto(34),
    'unaryExpression': Action.goto(35),
    '-': Action.shift(36),
    '!': Action.shift(37),
    'primary': Action.goto(38),
    'literal': Action.goto(39),
    'id': Action.shift(76),
    '(': Action.shift(40),
    'functionInvocation': Action.goto(41),
    'intLiteral': Action.shift(42),
    'str': Action.shift(43),
    'true': Action.shift(44),
    'false': Action.shift(45),
    'listLiteral': Action.goto(46),
    '[': Action.shift(47),
  },
  {
    'additiveExpression': Action.goto(93),
    'multiplicativeExpression': Action.goto(34),
    'unaryExpression': Action.goto(35),
    '-': Action.shift(36),
    '!': Action.shift(37),
    'primary': Action.goto(38),
    'literal': Action.goto(39),
    'id': Action.shift(76),
    '(': Action.shift(40),
    'functionInvocation': Action.goto(41),
    'intLiteral': Action.shift(42),
    'str': Action.shift(43),
    'true': Action.shift(44),
    'false': Action.shift(45),
    'listLiteral': Action.goto(46),
    '[': Action.shift(47),
  },
  {
    'additiveExpression': Action.goto(94),
    'multiplicativeExpression': Action.goto(34),
    'unaryExpression': Action.goto(35),
    '-': Action.shift(36),
    '!': Action.shift(37),
    'primary': Action.goto(38),
    'literal': Action.goto(39),
    'id': Action.shift(76),
    '(': Action.shift(40),
    'functionInvocation': Action.goto(41),
    'intLiteral': Action.shift(42),
    'str': Action.shift(43),
    'true': Action.shift(44),
    'false': Action.shift(45),
    'listLiteral': Action.goto(46),
    '[': Action.shift(47),
  },
  {
    'additiveExpression': Action.goto(95),
    'multiplicativeExpression': Action.goto(34),
    'unaryExpression': Action.goto(35),
    '-': Action.shift(36),
    '!': Action.shift(37),
    'primary': Action.goto(38),
    'literal': Action.goto(39),
    'id': Action.shift(76),
    '(': Action.shift(40),
    'functionInvocation': Action.goto(41),
    'intLiteral': Action.shift(42),
    'str': Action.shift(43),
    'true': Action.shift(44),
    'false': Action.shift(45),
    'listLiteral': Action.goto(46),
    '[': Action.shift(47),
  },
  {
    'additiveExpression': Action.goto(96),
    'multiplicativeExpression': Action.goto(34),
    'unaryExpression': Action.goto(35),
    '-': Action.shift(36),
    '!': Action.shift(37),
    'primary': Action.goto(38),
    'literal': Action.goto(39),
    'id': Action.shift(76),
    '(': Action.shift(40),
    'functionInvocation': Action.goto(41),
    'intLiteral': Action.shift(42),
    'str': Action.shift(43),
    'true': Action.shift(44),
    'false': Action.shift(45),
    'listLiteral': Action.goto(46),
    '[': Action.shift(47),
  },
  {
    'multiplicativeExpression': Action.goto(97),
    'unaryExpression': Action.goto(35),
    '-': Action.shift(36),
    '!': Action.shift(37),
    'primary': Action.goto(38),
    'literal': Action.goto(39),
    'id': Action.shift(76),
    '(': Action.shift(40),
    'functionInvocation': Action.goto(41),
    'intLiteral': Action.shift(42),
    'str': Action.shift(43),
    'true': Action.shift(44),
    'false': Action.shift(45),
    'listLiteral': Action.goto(46),
    '[': Action.shift(47),
  },
  {
    'multiplicativeExpression': Action.goto(98),
    'unaryExpression': Action.goto(35),
    '-': Action.shift(36),
    '!': Action.shift(37),
    'primary': Action.goto(38),
    'literal': Action.goto(39),
    'id': Action.shift(76),
    '(': Action.shift(40),
    'functionInvocation': Action.goto(41),
    'intLiteral': Action.shift(42),
    'str': Action.shift(43),
    'true': Action.shift(44),
    'false': Action.shift(45),
    'listLiteral': Action.goto(46),
    '[': Action.shift(47),
  },
  {
    'unaryExpression': Action.goto(99),
    '-': Action.shift(36),
    '!': Action.shift(37),
    'primary': Action.goto(38),
    'literal': Action.goto(39),
    'id': Action.shift(76),
    '(': Action.shift(40),
    'functionInvocation': Action.goto(41),
    'intLiteral': Action.shift(42),
    'str': Action.shift(43),
    'true': Action.shift(44),
    'false': Action.shift(45),
    'listLiteral': Action.goto(46),
    '[': Action.shift(47),
  },
  {
    'unaryExpression': Action.goto(100),
    '-': Action.shift(36),
    '!': Action.shift(37),
    'primary': Action.goto(38),
    'literal': Action.goto(39),
    'id': Action.shift(76),
    '(': Action.shift(40),
    'functionInvocation': Action.goto(41),
    'intLiteral': Action.shift(42),
    'str': Action.shift(43),
    'true': Action.shift(44),
    'false': Action.shift(45),
    'listLiteral': Action.goto(46),
    '[': Action.shift(47),
  },
  {
    'unaryExpression': Action.goto(101),
    '-': Action.shift(36),
    '!': Action.shift(37),
    'primary': Action.goto(38),
    'literal': Action.goto(39),
    'id': Action.shift(76),
    '(': Action.shift(40),
    'functionInvocation': Action.goto(41),
    'intLiteral': Action.shift(42),
    'str': Action.shift(43),
    'true': Action.shift(44),
    'false': Action.shift(45),
    'listLiteral': Action.goto(46),
    '[': Action.shift(47),
  },
  {
    '<=': Action.reduce(75),
    '>=': Action.reduce(75),
    '<': Action.reduce(75),
    '>': Action.reduce(75),
    '==': Action.reduce(75),
    '!=': Action.reduce(75),
    '?': Action.reduce(75),
    ';': Action.reduce(75),
    '||': Action.reduce(75),
    '&&': Action.reduce(75),
    '+': Action.reduce(75),
    '-': Action.reduce(75),
    '*': Action.reduce(75),
    '~/': Action.reduce(75),
    '%': Action.reduce(75),
    ')': Action.reduce(75),
    ']': Action.reduce(75),
    ',': Action.reduce(75),
    ':': Action.reduce(75),
  },
  {
    'arguments': Action.goto(59),
    '(': Action.shift(60),
    '<=': Action.reduce(79),
    '>=': Action.reduce(79),
    '<': Action.reduce(79),
    '>': Action.reduce(79),
    '==': Action.reduce(79),
    '!=': Action.reduce(79),
    '?': Action.reduce(79),
    ';': Action.reduce(79),
    '||': Action.reduce(79),
    '&&': Action.reduce(79),
    '+': Action.reduce(79),
    '-': Action.reduce(79),
    '*': Action.reduce(79),
    '~/': Action.reduce(79),
    '%': Action.reduce(79),
    ')': Action.reduce(79),
    ']': Action.reduce(79),
    ',': Action.reduce(79),
    ':': Action.reduce(79),
  },
  {
    '<=': Action.reduce(76),
    '>=': Action.reduce(76),
    '<': Action.reduce(76),
    '>': Action.reduce(76),
    '==': Action.reduce(76),
    '!=': Action.reduce(76),
    '?': Action.reduce(76),
    ';': Action.reduce(76),
    '||': Action.reduce(76),
    '&&': Action.reduce(76),
    '+': Action.reduce(76),
    '-': Action.reduce(76),
    '*': Action.reduce(76),
    '~/': Action.reduce(76),
    '%': Action.reduce(76),
    ')': Action.reduce(76),
    ']': Action.reduce(76),
    ',': Action.reduce(76),
    ':': Action.reduce(76),
  },
  {
    ')': Action.shift(102),
  },
  {
    '<=': Action.reduce(87),
    '>=': Action.reduce(87),
    '<': Action.reduce(87),
    '>': Action.reduce(87),
    '==': Action.reduce(87),
    '!=': Action.reduce(87),
    '?': Action.reduce(87),
    ';': Action.reduce(87),
    '||': Action.reduce(87),
    '&&': Action.reduce(87),
    '+': Action.reduce(87),
    '-': Action.reduce(87),
    '*': Action.reduce(87),
    '~/': Action.reduce(87),
    '%': Action.reduce(87),
    ')': Action.reduce(87),
    ']': Action.reduce(87),
    ',': Action.reduce(87),
    ':': Action.reduce(87),
  },
  {
    ']': Action.shift(103),
    ',': Action.shift(104),
  },
  {
    ']': Action.reduce(90),
    ',': Action.reduce(90),
    ')': Action.reduce(90),
  },
  {
    'functionBody': Action.goto(105),
    'block': Action.goto(106),
    '=>': Action.shift(107),
    '{': Action.shift(108),
  },
  {
    'parameter': Action.goto(109),
    'type': Action.goto(51),
    'num': Action.shift(8),
    'int': Action.shift(9),
    'double': Action.shift(10),
    'String': Action.shift(11),
    'bool': Action.shift(12),
    'List': Action.shift(13),
    'void': Action.shift(14),
    'id': Action.shift(15),
  },
  {
    ')': Action.reduce(18),
    ',': Action.reduce(18),
  },
  {
    ';': Action.reduce(53),
    ')': Action.reduce(53),
    ']': Action.reduce(53),
    ',': Action.reduce(53),
    ':': Action.reduce(53),
  },
  {
    ')': Action.shift(110),
    ',': Action.shift(104),
  },
  {
    '<=': Action.reduce(93),
    '>=': Action.reduce(93),
    '<': Action.reduce(93),
    '>': Action.reduce(93),
    '==': Action.reduce(93),
    '!=': Action.reduce(93),
    '?': Action.reduce(93),
    ';': Action.reduce(93),
    '||': Action.reduce(93),
    '&&': Action.reduce(93),
    '+': Action.reduce(93),
    '-': Action.reduce(93),
    '*': Action.reduce(93),
    '~/': Action.reduce(93),
    '%': Action.reduce(93),
    ')': Action.reduce(93),
    ']': Action.reduce(93),
    ',': Action.reduce(93),
    ':': Action.reduce(93),
  },
  {
    ':': Action.shift(111),
  },
  {
    '&&': Action.shift(63),
    '?': Action.reduce(56),
    ';': Action.reduce(56),
    '||': Action.reduce(56),
    ')': Action.reduce(56),
    ']': Action.reduce(56),
    ',': Action.reduce(56),
    ':': Action.reduce(56),
  },
  {
    '?': Action.reduce(58),
    ';': Action.reduce(58),
    '||': Action.reduce(58),
    '&&': Action.reduce(58),
    ')': Action.reduce(58),
    ']': Action.reduce(58),
    ',': Action.reduce(58),
    ':': Action.reduce(58),
  },
  {
    '?': Action.reduce(60),
    ';': Action.reduce(60),
    '||': Action.reduce(60),
    '&&': Action.reduce(60),
    ')': Action.reduce(60),
    ']': Action.reduce(60),
    ',': Action.reduce(60),
    ':': Action.reduce(60),
  },
  {
    '?': Action.reduce(61),
    ';': Action.reduce(61),
    '||': Action.reduce(61),
    '&&': Action.reduce(61),
    ')': Action.reduce(61),
    ']': Action.reduce(61),
    ',': Action.reduce(61),
    ':': Action.reduce(61),
  },
  {
    '+': Action.shift(70),
    '-': Action.shift(71),
    '==': Action.reduce(63),
    '!=': Action.reduce(63),
    '?': Action.reduce(63),
    ';': Action.reduce(63),
    '||': Action.reduce(63),
    '&&': Action.reduce(63),
    ')': Action.reduce(63),
    ']': Action.reduce(63),
    ',': Action.reduce(63),
    ':': Action.reduce(63),
  },
  {
    '+': Action.shift(70),
    '-': Action.shift(71),
    '==': Action.reduce(64),
    '!=': Action.reduce(64),
    '?': Action.reduce(64),
    ';': Action.reduce(64),
    '||': Action.reduce(64),
    '&&': Action.reduce(64),
    ')': Action.reduce(64),
    ']': Action.reduce(64),
    ',': Action.reduce(64),
    ':': Action.reduce(64),
  },
  {
    '+': Action.shift(70),
    '-': Action.shift(71),
    '==': Action.reduce(65),
    '!=': Action.reduce(65),
    '?': Action.reduce(65),
    ';': Action.reduce(65),
    '||': Action.reduce(65),
    '&&': Action.reduce(65),
    ')': Action.reduce(65),
    ']': Action.reduce(65),
    ',': Action.reduce(65),
    ':': Action.reduce(65),
  },
  {
    '+': Action.shift(70),
    '-': Action.shift(71),
    '==': Action.reduce(66),
    '!=': Action.reduce(66),
    '?': Action.reduce(66),
    ';': Action.reduce(66),
    '||': Action.reduce(66),
    '&&': Action.reduce(66),
    ')': Action.reduce(66),
    ']': Action.reduce(66),
    ',': Action.reduce(66),
    ':': Action.reduce(66),
  },
  {
    '*': Action.shift(72),
    '~/': Action.shift(73),
    '%': Action.shift(74),
    '<=': Action.reduce(68),
    '>=': Action.reduce(68),
    '<': Action.reduce(68),
    '>': Action.reduce(68),
    '==': Action.reduce(68),
    '!=': Action.reduce(68),
    '?': Action.reduce(68),
    ';': Action.reduce(68),
    '||': Action.reduce(68),
    '&&': Action.reduce(68),
    '+': Action.reduce(68),
    '-': Action.reduce(68),
    ')': Action.reduce(68),
    ']': Action.reduce(68),
    ',': Action.reduce(68),
    ':': Action.reduce(68),
  },
  {
    '*': Action.shift(72),
    '~/': Action.shift(73),
    '%': Action.shift(74),
    '<=': Action.reduce(69),
    '>=': Action.reduce(69),
    '<': Action.reduce(69),
    '>': Action.reduce(69),
    '==': Action.reduce(69),
    '!=': Action.reduce(69),
    '?': Action.reduce(69),
    ';': Action.reduce(69),
    '||': Action.reduce(69),
    '&&': Action.reduce(69),
    '+': Action.reduce(69),
    '-': Action.reduce(69),
    ')': Action.reduce(69),
    ']': Action.reduce(69),
    ',': Action.reduce(69),
    ':': Action.reduce(69),
  },
  {
    '<=': Action.reduce(71),
    '>=': Action.reduce(71),
    '<': Action.reduce(71),
    '>': Action.reduce(71),
    '==': Action.reduce(71),
    '!=': Action.reduce(71),
    '?': Action.reduce(71),
    ';': Action.reduce(71),
    '||': Action.reduce(71),
    '&&': Action.reduce(71),
    '+': Action.reduce(71),
    '-': Action.reduce(71),
    '*': Action.reduce(71),
    '~/': Action.reduce(71),
    '%': Action.reduce(71),
    ')': Action.reduce(71),
    ']': Action.reduce(71),
    ',': Action.reduce(71),
    ':': Action.reduce(71),
  },
  {
    '<=': Action.reduce(72),
    '>=': Action.reduce(72),
    '<': Action.reduce(72),
    '>': Action.reduce(72),
    '==': Action.reduce(72),
    '!=': Action.reduce(72),
    '?': Action.reduce(72),
    ';': Action.reduce(72),
    '||': Action.reduce(72),
    '&&': Action.reduce(72),
    '+': Action.reduce(72),
    '-': Action.reduce(72),
    '*': Action.reduce(72),
    '~/': Action.reduce(72),
    '%': Action.reduce(72),
    ')': Action.reduce(72),
    ']': Action.reduce(72),
    ',': Action.reduce(72),
    ':': Action.reduce(72),
  },
  {
    '<=': Action.reduce(73),
    '>=': Action.reduce(73),
    '<': Action.reduce(73),
    '>': Action.reduce(73),
    '==': Action.reduce(73),
    '!=': Action.reduce(73),
    '?': Action.reduce(73),
    ';': Action.reduce(73),
    '||': Action.reduce(73),
    '&&': Action.reduce(73),
    '+': Action.reduce(73),
    '-': Action.reduce(73),
    '*': Action.reduce(73),
    '~/': Action.reduce(73),
    '%': Action.reduce(73),
    ')': Action.reduce(73),
    ']': Action.reduce(73),
    ',': Action.reduce(73),
    ':': Action.reduce(73),
  },
  {
    '<=': Action.reduce(80),
    '>=': Action.reduce(80),
    '<': Action.reduce(80),
    '>': Action.reduce(80),
    '==': Action.reduce(80),
    '!=': Action.reduce(80),
    '?': Action.reduce(80),
    ';': Action.reduce(80),
    '||': Action.reduce(80),
    '&&': Action.reduce(80),
    '+': Action.reduce(80),
    '-': Action.reduce(80),
    '*': Action.reduce(80),
    '~/': Action.reduce(80),
    '%': Action.reduce(80),
    ')': Action.reduce(80),
    ']': Action.reduce(80),
    ',': Action.reduce(80),
    ':': Action.reduce(80),
  },
  {
    '<=': Action.reduce(88),
    '>=': Action.reduce(88),
    '<': Action.reduce(88),
    '>': Action.reduce(88),
    '==': Action.reduce(88),
    '!=': Action.reduce(88),
    '?': Action.reduce(88),
    ';': Action.reduce(88),
    '||': Action.reduce(88),
    '&&': Action.reduce(88),
    '+': Action.reduce(88),
    '-': Action.reduce(88),
    '*': Action.reduce(88),
    '~/': Action.reduce(88),
    '%': Action.reduce(88),
    ')': Action.reduce(88),
    ']': Action.reduce(88),
    ',': Action.reduce(88),
    ':': Action.reduce(88),
  },
  {
    'expression': Action.goto(112),
    'assignmentExpression': Action.goto(26),
    'conditionalExpression': Action.goto(27),
    'id': Action.shift(28),
    'logicalOrExpression': Action.goto(29),
    'logicalAndExpression': Action.goto(30),
    'equalityExpression': Action.goto(31),
    'relationalExpression': Action.goto(32),
    'additiveExpression': Action.goto(33),
    'multiplicativeExpression': Action.goto(34),
    'unaryExpression': Action.goto(35),
    '-': Action.shift(36),
    '!': Action.shift(37),
    'primary': Action.goto(38),
    'literal': Action.goto(39),
    '(': Action.shift(40),
    'functionInvocation': Action.goto(41),
    'intLiteral': Action.shift(42),
    'str': Action.shift(43),
    'true': Action.shift(44),
    'false': Action.shift(45),
    'listLiteral': Action.goto(46),
    '[': Action.shift(47),
  },
  {
    '\$': Action.reduce(13),
    'class': Action.reduce(13),
    'num': Action.reduce(13),
    'int': Action.reduce(13),
    'double': Action.reduce(13),
    'String': Action.reduce(13),
    'bool': Action.reduce(13),
    'List': Action.reduce(13),
    'void': Action.reduce(13),
    'id': Action.reduce(13),
    '}': Action.reduce(13),
  },
  {
    '\$': Action.reduce(19),
    'class': Action.reduce(19),
    'num': Action.reduce(19),
    'int': Action.reduce(19),
    'double': Action.reduce(19),
    'String': Action.reduce(19),
    'bool': Action.reduce(19),
    'List': Action.reduce(19),
    'void': Action.reduce(19),
    'id': Action.reduce(19),
    '}': Action.reduce(19),
  },
  {
    'expression': Action.goto(113),
    'assignmentExpression': Action.goto(26),
    'conditionalExpression': Action.goto(27),
    'id': Action.shift(28),
    'logicalOrExpression': Action.goto(29),
    'logicalAndExpression': Action.goto(30),
    'equalityExpression': Action.goto(31),
    'relationalExpression': Action.goto(32),
    'additiveExpression': Action.goto(33),
    'multiplicativeExpression': Action.goto(34),
    'unaryExpression': Action.goto(35),
    '-': Action.shift(36),
    '!': Action.shift(37),
    'primary': Action.goto(38),
    'literal': Action.goto(39),
    '(': Action.shift(40),
    'functionInvocation': Action.goto(41),
    'intLiteral': Action.shift(42),
    'str': Action.shift(43),
    'true': Action.shift(44),
    'false': Action.shift(45),
    'listLiteral': Action.goto(46),
    '[': Action.shift(47),
  },
  {
    'statements': Action.goto(114),
    '}': Action.reduce(31),
    '{': Action.reduce(31),
    'return': Action.reduce(31),
    'if': Action.reduce(31),
    'for': Action.reduce(31),
    'while': Action.reduce(31),
    'break': Action.reduce(31),
    'continue': Action.reduce(31),
    'num': Action.reduce(31),
    'int': Action.reduce(31),
    'double': Action.reduce(31),
    'String': Action.reduce(31),
    'bool': Action.reduce(31),
    'List': Action.reduce(31),
    'void': Action.reduce(31),
    'id': Action.reduce(31),
    '-': Action.reduce(31),
    '!': Action.reduce(31),
    '(': Action.reduce(31),
    'intLiteral': Action.reduce(31),
    'str': Action.reduce(31),
    'true': Action.reduce(31),
    'false': Action.reduce(31),
    '[': Action.reduce(31),
  },
  {
    ')': Action.reduce(16),
    ',': Action.reduce(16),
  },
  {
    '<=': Action.reduce(92),
    '>=': Action.reduce(92),
    '<': Action.reduce(92),
    '>': Action.reduce(92),
    '==': Action.reduce(92),
    '!=': Action.reduce(92),
    '?': Action.reduce(92),
    ';': Action.reduce(92),
    '||': Action.reduce(92),
    '&&': Action.reduce(92),
    '+': Action.reduce(92),
    '-': Action.reduce(92),
    '*': Action.reduce(92),
    '~/': Action.reduce(92),
    '%': Action.reduce(92),
    ')': Action.reduce(92),
    ']': Action.reduce(92),
    ',': Action.reduce(92),
    ':': Action.reduce(92),
  },
  {
    'expression': Action.goto(115),
    'assignmentExpression': Action.goto(26),
    'conditionalExpression': Action.goto(27),
    'id': Action.shift(28),
    'logicalOrExpression': Action.goto(29),
    'logicalAndExpression': Action.goto(30),
    'equalityExpression': Action.goto(31),
    'relationalExpression': Action.goto(32),
    'additiveExpression': Action.goto(33),
    'multiplicativeExpression': Action.goto(34),
    'unaryExpression': Action.goto(35),
    '-': Action.shift(36),
    '!': Action.shift(37),
    'primary': Action.goto(38),
    'literal': Action.goto(39),
    '(': Action.shift(40),
    'functionInvocation': Action.goto(41),
    'intLiteral': Action.shift(42),
    'str': Action.shift(43),
    'true': Action.shift(44),
    'false': Action.shift(45),
    'listLiteral': Action.goto(46),
    '[': Action.shift(47),
  },
  {
    ']': Action.reduce(89),
    ',': Action.reduce(89),
    ')': Action.reduce(89),
  },
  {
    ';': Action.shift(116),
  },
  {
    '}': Action.shift(117),
    'statement': Action.goto(118),
    'block': Action.goto(119),
    'expressionStatement': Action.goto(120),
    'returnStatement': Action.goto(121),
    'ifStatement': Action.goto(122),
    'forStatement': Action.goto(123),
    'whileStatement': Action.goto(124),
    'breakStatement': Action.goto(125),
    'variableDeclaration': Action.goto(126),
    '{': Action.shift(108),
    'expression': Action.goto(127),
    'return': Action.shift(128),
    'if': Action.shift(129),
    'for': Action.shift(130),
    'while': Action.shift(131),
    'break': Action.shift(132),
    'continue': Action.shift(133),
    'type': Action.goto(134),
    'assignmentExpression': Action.goto(26),
    'conditionalExpression': Action.goto(27),
    'num': Action.shift(8),
    'int': Action.shift(9),
    'double': Action.shift(10),
    'String': Action.shift(11),
    'bool': Action.shift(12),
    'List': Action.shift(13),
    'void': Action.shift(14),
    'id': Action.shift(135),
    'logicalOrExpression': Action.goto(29),
    'logicalAndExpression': Action.goto(30),
    'equalityExpression': Action.goto(31),
    'relationalExpression': Action.goto(32),
    'additiveExpression': Action.goto(33),
    'multiplicativeExpression': Action.goto(34),
    'unaryExpression': Action.goto(35),
    '-': Action.shift(36),
    '!': Action.shift(37),
    'primary': Action.goto(38),
    'literal': Action.goto(39),
    '(': Action.shift(40),
    'functionInvocation': Action.goto(41),
    'intLiteral': Action.shift(42),
    'str': Action.shift(43),
    'true': Action.shift(44),
    'false': Action.shift(45),
    'listLiteral': Action.goto(46),
    '[': Action.shift(47),
  },
  {
    ';': Action.reduce(54),
    ')': Action.reduce(54),
    ']': Action.reduce(54),
    ',': Action.reduce(54),
    ':': Action.reduce(54),
  },
  {
    '\$': Action.reduce(20),
    'class': Action.reduce(20),
    'num': Action.reduce(20),
    'int': Action.reduce(20),
    'double': Action.reduce(20),
    'String': Action.reduce(20),
    'bool': Action.reduce(20),
    'List': Action.reduce(20),
    'void': Action.reduce(20),
    'id': Action.reduce(20),
    '}': Action.reduce(20),
  },
  {
    '\$': Action.reduce(29),
    'class': Action.reduce(29),
    'num': Action.reduce(29),
    'int': Action.reduce(29),
    'double': Action.reduce(29),
    'String': Action.reduce(29),
    'bool': Action.reduce(29),
    'List': Action.reduce(29),
    'void': Action.reduce(29),
    'id': Action.reduce(29),
    '}': Action.reduce(29),
    '{': Action.reduce(29),
    'return': Action.reduce(29),
    'if': Action.reduce(29),
    'for': Action.reduce(29),
    'while': Action.reduce(29),
    'break': Action.reduce(29),
    'continue': Action.reduce(29),
    '-': Action.reduce(29),
    '!': Action.reduce(29),
    '(': Action.reduce(29),
    'intLiteral': Action.reduce(29),
    'str': Action.reduce(29),
    'true': Action.reduce(29),
    'false': Action.reduce(29),
    '[': Action.reduce(29),
    'else': Action.reduce(29),
  },
  {
    '}': Action.reduce(30),
    '{': Action.reduce(30),
    'return': Action.reduce(30),
    'if': Action.reduce(30),
    'for': Action.reduce(30),
    'while': Action.reduce(30),
    'break': Action.reduce(30),
    'continue': Action.reduce(30),
    'num': Action.reduce(30),
    'int': Action.reduce(30),
    'double': Action.reduce(30),
    'String': Action.reduce(30),
    'bool': Action.reduce(30),
    'List': Action.reduce(30),
    'void': Action.reduce(30),
    'id': Action.reduce(30),
    '-': Action.reduce(30),
    '!': Action.reduce(30),
    '(': Action.reduce(30),
    'intLiteral': Action.reduce(30),
    'str': Action.reduce(30),
    'true': Action.reduce(30),
    'false': Action.reduce(30),
    '[': Action.reduce(30),
  },
  {
    '}': Action.reduce(32),
    '{': Action.reduce(32),
    'return': Action.reduce(32),
    'if': Action.reduce(32),
    'for': Action.reduce(32),
    'while': Action.reduce(32),
    'break': Action.reduce(32),
    'continue': Action.reduce(32),
    'num': Action.reduce(32),
    'int': Action.reduce(32),
    'double': Action.reduce(32),
    'String': Action.reduce(32),
    'bool': Action.reduce(32),
    'List': Action.reduce(32),
    'void': Action.reduce(32),
    'id': Action.reduce(32),
    '-': Action.reduce(32),
    '!': Action.reduce(32),
    '(': Action.reduce(32),
    'intLiteral': Action.reduce(32),
    'str': Action.reduce(32),
    'true': Action.reduce(32),
    'false': Action.reduce(32),
    '[': Action.reduce(32),
  },
  {
    '}': Action.reduce(33),
    '{': Action.reduce(33),
    'return': Action.reduce(33),
    'if': Action.reduce(33),
    'for': Action.reduce(33),
    'while': Action.reduce(33),
    'break': Action.reduce(33),
    'continue': Action.reduce(33),
    'num': Action.reduce(33),
    'int': Action.reduce(33),
    'double': Action.reduce(33),
    'String': Action.reduce(33),
    'bool': Action.reduce(33),
    'List': Action.reduce(33),
    'void': Action.reduce(33),
    'id': Action.reduce(33),
    '-': Action.reduce(33),
    '!': Action.reduce(33),
    '(': Action.reduce(33),
    'intLiteral': Action.reduce(33),
    'str': Action.reduce(33),
    'true': Action.reduce(33),
    'false': Action.reduce(33),
    '[': Action.reduce(33),
  },
  {
    '}': Action.reduce(34),
    '{': Action.reduce(34),
    'return': Action.reduce(34),
    'if': Action.reduce(34),
    'for': Action.reduce(34),
    'while': Action.reduce(34),
    'break': Action.reduce(34),
    'continue': Action.reduce(34),
    'num': Action.reduce(34),
    'int': Action.reduce(34),
    'double': Action.reduce(34),
    'String': Action.reduce(34),
    'bool': Action.reduce(34),
    'List': Action.reduce(34),
    'void': Action.reduce(34),
    'id': Action.reduce(34),
    '-': Action.reduce(34),
    '!': Action.reduce(34),
    '(': Action.reduce(34),
    'intLiteral': Action.reduce(34),
    'str': Action.reduce(34),
    'true': Action.reduce(34),
    'false': Action.reduce(34),
    '[': Action.reduce(34),
  },
  {
    '}': Action.reduce(35),
    '{': Action.reduce(35),
    'return': Action.reduce(35),
    'if': Action.reduce(35),
    'for': Action.reduce(35),
    'while': Action.reduce(35),
    'break': Action.reduce(35),
    'continue': Action.reduce(35),
    'num': Action.reduce(35),
    'int': Action.reduce(35),
    'double': Action.reduce(35),
    'String': Action.reduce(35),
    'bool': Action.reduce(35),
    'List': Action.reduce(35),
    'void': Action.reduce(35),
    'id': Action.reduce(35),
    '-': Action.reduce(35),
    '!': Action.reduce(35),
    '(': Action.reduce(35),
    'intLiteral': Action.reduce(35),
    'str': Action.reduce(35),
    'true': Action.reduce(35),
    'false': Action.reduce(35),
    '[': Action.reduce(35),
  },
  {
    '}': Action.reduce(36),
    '{': Action.reduce(36),
    'return': Action.reduce(36),
    'if': Action.reduce(36),
    'for': Action.reduce(36),
    'while': Action.reduce(36),
    'break': Action.reduce(36),
    'continue': Action.reduce(36),
    'num': Action.reduce(36),
    'int': Action.reduce(36),
    'double': Action.reduce(36),
    'String': Action.reduce(36),
    'bool': Action.reduce(36),
    'List': Action.reduce(36),
    'void': Action.reduce(36),
    'id': Action.reduce(36),
    '-': Action.reduce(36),
    '!': Action.reduce(36),
    '(': Action.reduce(36),
    'intLiteral': Action.reduce(36),
    'str': Action.reduce(36),
    'true': Action.reduce(36),
    'false': Action.reduce(36),
    '[': Action.reduce(36),
  },
  {
    '}': Action.reduce(37),
    '{': Action.reduce(37),
    'return': Action.reduce(37),
    'if': Action.reduce(37),
    'for': Action.reduce(37),
    'while': Action.reduce(37),
    'break': Action.reduce(37),
    'continue': Action.reduce(37),
    'num': Action.reduce(37),
    'int': Action.reduce(37),
    'double': Action.reduce(37),
    'String': Action.reduce(37),
    'bool': Action.reduce(37),
    'List': Action.reduce(37),
    'void': Action.reduce(37),
    'id': Action.reduce(37),
    '-': Action.reduce(37),
    '!': Action.reduce(37),
    '(': Action.reduce(37),
    'intLiteral': Action.reduce(37),
    'str': Action.reduce(37),
    'true': Action.reduce(37),
    'false': Action.reduce(37),
    '[': Action.reduce(37),
  },
  {
    '}': Action.reduce(38),
    '{': Action.reduce(38),
    'return': Action.reduce(38),
    'if': Action.reduce(38),
    'for': Action.reduce(38),
    'while': Action.reduce(38),
    'break': Action.reduce(38),
    'continue': Action.reduce(38),
    'num': Action.reduce(38),
    'int': Action.reduce(38),
    'double': Action.reduce(38),
    'String': Action.reduce(38),
    'bool': Action.reduce(38),
    'List': Action.reduce(38),
    'void': Action.reduce(38),
    'id': Action.reduce(38),
    '-': Action.reduce(38),
    '!': Action.reduce(38),
    '(': Action.reduce(38),
    'intLiteral': Action.reduce(38),
    'str': Action.reduce(38),
    'true': Action.reduce(38),
    'false': Action.reduce(38),
    '[': Action.reduce(38),
  },
  {
    '}': Action.reduce(39),
    '{': Action.reduce(39),
    'return': Action.reduce(39),
    'if': Action.reduce(39),
    'for': Action.reduce(39),
    'while': Action.reduce(39),
    'break': Action.reduce(39),
    'continue': Action.reduce(39),
    'num': Action.reduce(39),
    'int': Action.reduce(39),
    'double': Action.reduce(39),
    'String': Action.reduce(39),
    'bool': Action.reduce(39),
    'List': Action.reduce(39),
    'void': Action.reduce(39),
    'id': Action.reduce(39),
    '-': Action.reduce(39),
    '!': Action.reduce(39),
    '(': Action.reduce(39),
    'intLiteral': Action.reduce(39),
    'str': Action.reduce(39),
    'true': Action.reduce(39),
    'false': Action.reduce(39),
    '[': Action.reduce(39),
  },
  {
    ';': Action.shift(136),
  },
  {
    'expression': Action.goto(137),
    ';': Action.shift(138),
    'assignmentExpression': Action.goto(26),
    'conditionalExpression': Action.goto(27),
    'id': Action.shift(28),
    'logicalOrExpression': Action.goto(29),
    'logicalAndExpression': Action.goto(30),
    'equalityExpression': Action.goto(31),
    'relationalExpression': Action.goto(32),
    'additiveExpression': Action.goto(33),
    'multiplicativeExpression': Action.goto(34),
    'unaryExpression': Action.goto(35),
    '-': Action.shift(36),
    '!': Action.shift(37),
    'primary': Action.goto(38),
    'literal': Action.goto(39),
    '(': Action.shift(40),
    'functionInvocation': Action.goto(41),
    'intLiteral': Action.shift(42),
    'str': Action.shift(43),
    'true': Action.shift(44),
    'false': Action.shift(45),
    'listLiteral': Action.goto(46),
    '[': Action.shift(47),
  },
  {
    '(': Action.shift(139),
  },
  {
    '(': Action.shift(140),
  },
  {
    '(': Action.shift(141),
  },
  {
    ';': Action.shift(142),
  },
  {
    ';': Action.shift(143),
  },
  {
    'id': Action.shift(144),
  },
  {
    '=': Action.shift(58),
    'arguments': Action.goto(59),
    '(': Action.shift(60),
    'id': Action.reduce(28),
    '<=': Action.reduce(79),
    '>=': Action.reduce(79),
    '<': Action.reduce(79),
    '>': Action.reduce(79),
    '==': Action.reduce(79),
    '!=': Action.reduce(79),
    '?': Action.reduce(79),
    ';': Action.reduce(79),
    '||': Action.reduce(79),
    '&&': Action.reduce(79),
    '+': Action.reduce(79),
    '-': Action.reduce(79),
    '*': Action.reduce(79),
    '~/': Action.reduce(79),
    '%': Action.reduce(79),
  },
  {
    '}': Action.reduce(40),
    '{': Action.reduce(40),
    'return': Action.reduce(40),
    'if': Action.reduce(40),
    'for': Action.reduce(40),
    'while': Action.reduce(40),
    'break': Action.reduce(40),
    'continue': Action.reduce(40),
    'num': Action.reduce(40),
    'int': Action.reduce(40),
    'double': Action.reduce(40),
    'String': Action.reduce(40),
    'bool': Action.reduce(40),
    'List': Action.reduce(40),
    'void': Action.reduce(40),
    'id': Action.reduce(40),
    '-': Action.reduce(40),
    '!': Action.reduce(40),
    '(': Action.reduce(40),
    'intLiteral': Action.reduce(40),
    'str': Action.reduce(40),
    'true': Action.reduce(40),
    'false': Action.reduce(40),
    '[': Action.reduce(40),
  },
  {
    ';': Action.shift(145),
  },
  {
    '}': Action.reduce(42),
    '{': Action.reduce(42),
    'return': Action.reduce(42),
    'if': Action.reduce(42),
    'for': Action.reduce(42),
    'while': Action.reduce(42),
    'break': Action.reduce(42),
    'continue': Action.reduce(42),
    'num': Action.reduce(42),
    'int': Action.reduce(42),
    'double': Action.reduce(42),
    'String': Action.reduce(42),
    'bool': Action.reduce(42),
    'List': Action.reduce(42),
    'void': Action.reduce(42),
    'id': Action.reduce(42),
    '-': Action.reduce(42),
    '!': Action.reduce(42),
    '(': Action.reduce(42),
    'intLiteral': Action.reduce(42),
    'str': Action.reduce(42),
    'true': Action.reduce(42),
    'false': Action.reduce(42),
    '[': Action.reduce(42),
  },
  {
    'expression': Action.goto(146),
    'assignmentExpression': Action.goto(26),
    'conditionalExpression': Action.goto(27),
    'id': Action.shift(28),
    'logicalOrExpression': Action.goto(29),
    'logicalAndExpression': Action.goto(30),
    'equalityExpression': Action.goto(31),
    'relationalExpression': Action.goto(32),
    'additiveExpression': Action.goto(33),
    'multiplicativeExpression': Action.goto(34),
    'unaryExpression': Action.goto(35),
    '-': Action.shift(36),
    '!': Action.shift(37),
    'primary': Action.goto(38),
    'literal': Action.goto(39),
    '(': Action.shift(40),
    'functionInvocation': Action.goto(41),
    'intLiteral': Action.shift(42),
    'str': Action.shift(43),
    'true': Action.shift(44),
    'false': Action.shift(45),
    'listLiteral': Action.goto(46),
    '[': Action.shift(47),
  },
  {
    'variableDeclaration': Action.goto(147),
    'type': Action.goto(134),
    'num': Action.shift(8),
    'int': Action.shift(9),
    'double': Action.shift(10),
    'String': Action.shift(11),
    'bool': Action.shift(12),
    'List': Action.shift(13),
    'void': Action.shift(14),
    'id': Action.shift(15),
  },
  {
    'expression': Action.goto(148),
    'assignmentExpression': Action.goto(26),
    'conditionalExpression': Action.goto(27),
    'id': Action.shift(28),
    'logicalOrExpression': Action.goto(29),
    'logicalAndExpression': Action.goto(30),
    'equalityExpression': Action.goto(31),
    'relationalExpression': Action.goto(32),
    'additiveExpression': Action.goto(33),
    'multiplicativeExpression': Action.goto(34),
    'unaryExpression': Action.goto(35),
    '-': Action.shift(36),
    '!': Action.shift(37),
    'primary': Action.goto(38),
    'literal': Action.goto(39),
    '(': Action.shift(40),
    'functionInvocation': Action.goto(41),
    'intLiteral': Action.shift(42),
    'str': Action.shift(43),
    'true': Action.shift(44),
    'false': Action.shift(45),
    'listLiteral': Action.goto(46),
    '[': Action.shift(47),
  },
  {
    '}': Action.reduce(49),
    '{': Action.reduce(49),
    'return': Action.reduce(49),
    'if': Action.reduce(49),
    'for': Action.reduce(49),
    'while': Action.reduce(49),
    'break': Action.reduce(49),
    'continue': Action.reduce(49),
    'num': Action.reduce(49),
    'int': Action.reduce(49),
    'double': Action.reduce(49),
    'String': Action.reduce(49),
    'bool': Action.reduce(49),
    'List': Action.reduce(49),
    'void': Action.reduce(49),
    'id': Action.reduce(49),
    '-': Action.reduce(49),
    '!': Action.reduce(49),
    '(': Action.reduce(49),
    'intLiteral': Action.reduce(49),
    'str': Action.reduce(49),
    'true': Action.reduce(49),
    'false': Action.reduce(49),
    '[': Action.reduce(49),
  },
  {
    '}': Action.reduce(50),
    '{': Action.reduce(50),
    'return': Action.reduce(50),
    'if': Action.reduce(50),
    'for': Action.reduce(50),
    'while': Action.reduce(50),
    'break': Action.reduce(50),
    'continue': Action.reduce(50),
    'num': Action.reduce(50),
    'int': Action.reduce(50),
    'double': Action.reduce(50),
    'String': Action.reduce(50),
    'bool': Action.reduce(50),
    'List': Action.reduce(50),
    'void': Action.reduce(50),
    'id': Action.reduce(50),
    '-': Action.reduce(50),
    '!': Action.reduce(50),
    '(': Action.reduce(50),
    'intLiteral': Action.reduce(50),
    'str': Action.reduce(50),
    'true': Action.reduce(50),
    'false': Action.reduce(50),
    '[': Action.reduce(50),
  },
  {
    ';': Action.shift(20),
    '=': Action.shift(21),
  },
  {
    '}': Action.reduce(41),
    '{': Action.reduce(41),
    'return': Action.reduce(41),
    'if': Action.reduce(41),
    'for': Action.reduce(41),
    'while': Action.reduce(41),
    'break': Action.reduce(41),
    'continue': Action.reduce(41),
    'num': Action.reduce(41),
    'int': Action.reduce(41),
    'double': Action.reduce(41),
    'String': Action.reduce(41),
    'bool': Action.reduce(41),
    'List': Action.reduce(41),
    'void': Action.reduce(41),
    'id': Action.reduce(41),
    '-': Action.reduce(41),
    '!': Action.reduce(41),
    '(': Action.reduce(41),
    'intLiteral': Action.reduce(41),
    'str': Action.reduce(41),
    'true': Action.reduce(41),
    'false': Action.reduce(41),
    '[': Action.reduce(41),
  },
  {
    ')': Action.shift(149),
  },
  {
    'expression': Action.goto(150),
    'assignmentExpression': Action.goto(26),
    'conditionalExpression': Action.goto(27),
    'id': Action.shift(28),
    'logicalOrExpression': Action.goto(29),
    'logicalAndExpression': Action.goto(30),
    'equalityExpression': Action.goto(31),
    'relationalExpression': Action.goto(32),
    'additiveExpression': Action.goto(33),
    'multiplicativeExpression': Action.goto(34),
    'unaryExpression': Action.goto(35),
    '-': Action.shift(36),
    '!': Action.shift(37),
    'primary': Action.goto(38),
    'literal': Action.goto(39),
    '(': Action.shift(40),
    'functionInvocation': Action.goto(41),
    'intLiteral': Action.shift(42),
    'str': Action.shift(43),
    'true': Action.shift(44),
    'false': Action.shift(45),
    'listLiteral': Action.goto(46),
    '[': Action.shift(47),
  },
  {
    ')': Action.shift(151),
  },
  {
    'block': Action.goto(152),
    '{': Action.shift(108),
  },
  {
    ';': Action.shift(153),
  },
  {
    'block': Action.goto(154),
    '{': Action.shift(108),
  },
  {
    'elseStatement': Action.goto(155),
    'else': Action.shift(156),
    '}': Action.reduce(46),
    '{': Action.reduce(46),
    'return': Action.reduce(46),
    'if': Action.reduce(46),
    'for': Action.reduce(46),
    'while': Action.reduce(46),
    'break': Action.reduce(46),
    'continue': Action.reduce(46),
    'num': Action.reduce(46),
    'int': Action.reduce(46),
    'double': Action.reduce(46),
    'String': Action.reduce(46),
    'bool': Action.reduce(46),
    'List': Action.reduce(46),
    'void': Action.reduce(46),
    'id': Action.reduce(46),
    '-': Action.reduce(46),
    '!': Action.reduce(46),
    '(': Action.reduce(46),
    'intLiteral': Action.reduce(46),
    'str': Action.reduce(46),
    'true': Action.reduce(46),
    'false': Action.reduce(46),
    '[': Action.reduce(46),
  },
  {
    'expression': Action.goto(157),
    'assignmentExpression': Action.goto(26),
    'conditionalExpression': Action.goto(27),
    'id': Action.shift(28),
    'logicalOrExpression': Action.goto(29),
    'logicalAndExpression': Action.goto(30),
    'equalityExpression': Action.goto(31),
    'relationalExpression': Action.goto(32),
    'additiveExpression': Action.goto(33),
    'multiplicativeExpression': Action.goto(34),
    'unaryExpression': Action.goto(35),
    '-': Action.shift(36),
    '!': Action.shift(37),
    'primary': Action.goto(38),
    'literal': Action.goto(39),
    '(': Action.shift(40),
    'functionInvocation': Action.goto(41),
    'intLiteral': Action.shift(42),
    'str': Action.shift(43),
    'true': Action.shift(44),
    'false': Action.shift(45),
    'listLiteral': Action.goto(46),
    '[': Action.shift(47),
  },
  {
    '}': Action.reduce(48),
    '{': Action.reduce(48),
    'return': Action.reduce(48),
    'if': Action.reduce(48),
    'for': Action.reduce(48),
    'while': Action.reduce(48),
    'break': Action.reduce(48),
    'continue': Action.reduce(48),
    'num': Action.reduce(48),
    'int': Action.reduce(48),
    'double': Action.reduce(48),
    'String': Action.reduce(48),
    'bool': Action.reduce(48),
    'List': Action.reduce(48),
    'void': Action.reduce(48),
    'id': Action.reduce(48),
    '-': Action.reduce(48),
    '!': Action.reduce(48),
    '(': Action.reduce(48),
    'intLiteral': Action.reduce(48),
    'str': Action.reduce(48),
    'true': Action.reduce(48),
    'false': Action.reduce(48),
    '[': Action.reduce(48),
  },
  {
    '}': Action.reduce(43),
    '{': Action.reduce(43),
    'return': Action.reduce(43),
    'if': Action.reduce(43),
    'for': Action.reduce(43),
    'while': Action.reduce(43),
    'break': Action.reduce(43),
    'continue': Action.reduce(43),
    'num': Action.reduce(43),
    'int': Action.reduce(43),
    'double': Action.reduce(43),
    'String': Action.reduce(43),
    'bool': Action.reduce(43),
    'List': Action.reduce(43),
    'void': Action.reduce(43),
    'id': Action.reduce(43),
    '-': Action.reduce(43),
    '!': Action.reduce(43),
    '(': Action.reduce(43),
    'intLiteral': Action.reduce(43),
    'str': Action.reduce(43),
    'true': Action.reduce(43),
    'false': Action.reduce(43),
    '[': Action.reduce(43),
  },
  {
    'ifStatement': Action.goto(158),
    'block': Action.goto(159),
    'if': Action.shift(129),
    '{': Action.shift(108),
  },
  {
    ')': Action.shift(160),
  },
  {
    '}': Action.reduce(44),
    '{': Action.reduce(44),
    'return': Action.reduce(44),
    'if': Action.reduce(44),
    'for': Action.reduce(44),
    'while': Action.reduce(44),
    'break': Action.reduce(44),
    'continue': Action.reduce(44),
    'num': Action.reduce(44),
    'int': Action.reduce(44),
    'double': Action.reduce(44),
    'String': Action.reduce(44),
    'bool': Action.reduce(44),
    'List': Action.reduce(44),
    'void': Action.reduce(44),
    'id': Action.reduce(44),
    '-': Action.reduce(44),
    '!': Action.reduce(44),
    '(': Action.reduce(44),
    'intLiteral': Action.reduce(44),
    'str': Action.reduce(44),
    'true': Action.reduce(44),
    'false': Action.reduce(44),
    '[': Action.reduce(44),
  },
  {
    '}': Action.reduce(45),
    '{': Action.reduce(45),
    'return': Action.reduce(45),
    'if': Action.reduce(45),
    'for': Action.reduce(45),
    'while': Action.reduce(45),
    'break': Action.reduce(45),
    'continue': Action.reduce(45),
    'num': Action.reduce(45),
    'int': Action.reduce(45),
    'double': Action.reduce(45),
    'String': Action.reduce(45),
    'bool': Action.reduce(45),
    'List': Action.reduce(45),
    'void': Action.reduce(45),
    'id': Action.reduce(45),
    '-': Action.reduce(45),
    '!': Action.reduce(45),
    '(': Action.reduce(45),
    'intLiteral': Action.reduce(45),
    'str': Action.reduce(45),
    'true': Action.reduce(45),
    'false': Action.reduce(45),
    '[': Action.reduce(45),
  },
  {
    'block': Action.goto(161),
    '{': Action.shift(108),
  },
  {
    '}': Action.reduce(47),
    '{': Action.reduce(47),
    'return': Action.reduce(47),
    'if': Action.reduce(47),
    'for': Action.reduce(47),
    'while': Action.reduce(47),
    'break': Action.reduce(47),
    'continue': Action.reduce(47),
    'num': Action.reduce(47),
    'int': Action.reduce(47),
    'double': Action.reduce(47),
    'String': Action.reduce(47),
    'bool': Action.reduce(47),
    'List': Action.reduce(47),
    'void': Action.reduce(47),
    'id': Action.reduce(47),
    '-': Action.reduce(47),
    '!': Action.reduce(47),
    '(': Action.reduce(47),
    'intLiteral': Action.reduce(47),
    'str': Action.reduce(47),
    'true': Action.reduce(47),
    'false': Action.reduce(47),
    '[': Action.reduce(47),
  },
];
